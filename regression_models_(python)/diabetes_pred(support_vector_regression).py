# -*- coding: utf-8 -*-
"""Diabetes_Pred(Support_Vector_Regression).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jdg6lJkk6-DwLLIe8XRWmUKnqdzc63UC

# Support Vector Regression (SVR)

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('diabetes_data_upload.csv')
dataset.head()

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

y = y.reshape(len(y),1)

print(X)

print(y)

"""## Data Preprocessing"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X[:, 0] = sc.fit_transform(X[:, [0]]).ravel()

from sklearn.preprocessing import OrdinalEncoder
encoder = OrdinalEncoder()
X[:, 1:] = encoder.fit_transform(X[:, 1:])

y = encoder.fit_transform(y)

print(X)

print(y)

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""## Training the SVR model on the Training set"""

from sklearn.svm import SVR
regressor = SVR(kernel = 'rbf')
regressor.fit(X_train, y_train)

"""## Predicting the Test set results"""

y_pred = regressor.predict(X_test).reshape(len(y_test), 1)

print(y_pred)

"""## Evaluating the Model Performance"""

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

"""##Determining Percentage Acuracy on Test Results"""

def accuracy(x_test, y_test, y_pred):
    correct = 0
    for i in range(len(y_pred)):
        if np.round(y_pred[i]) == y_test[i]:
            correct += 1
    accuracy = (correct / len(y_pred)) * 100
    return accuracy

accuracy_score = accuracy(X_test, y_test, y_pred)
print(f"Accuracy: {accuracy_score}%")

"""##Visualisation of results"""

# Scatter plot of actual vs. predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--', color='red')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Values (SVR)')
plt.show()

# Histogram of residuals
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
plt.hist(residuals, bins=20, edgecolor='k')
plt.xlabel('Residual')
plt.ylabel('Frequency')
plt.title('Histogram of Residuals (SVR)')
plt.show()