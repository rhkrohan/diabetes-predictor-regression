# -*- coding: utf-8 -*-
"""Diabetes_Pred(Decision_Tree_Regression).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mtQDhYOB_zm857qy1LyHl1g5bGm6RHAy

# Decision Tree Regression

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('diabetes_data_upload.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""##Data Preprocessing"""

from sklearn.preprocessing import OrdinalEncoder
encoder = OrdinalEncoder()
X[:, 1:] = encoder.fit_transform(X[:, 1:])

print(X[:10])

y = y.reshape(len(y), 1)
y = encoder.fit_transform(y)

print(y[:10])

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""## Training the Decision Tree Regression model on the Training set"""

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(random_state = 0)
regressor.fit(X_train, y_train)

"""## Predicting the Test set results"""

y_pred = regressor.predict(X_test)
np.set_printoptions(precision=2)
results = np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)
print(results[:10])

"""## Evaluating the Model Performance"""

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

"""##Determining Percentage Acuracy on Test Results

"""

def accuracy(x_test, y_test, y_pred):
    correct = 0
    for i in range(len(y_pred)):
        if np.round(y_pred[i]) == y_test[i]:
            correct += 1
    accuracy = (correct / len(y_pred)) * 100
    return accuracy

accuracy_score = accuracy(X_test, y_test, y_pred)
print(f"Accuracy: {accuracy_score}%")

"""##Visualising the results"""

# Scatter plot of actual vs. predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([0, 1], [0, 1], '--', color='red')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Values')
plt.show()

# Histogram of residuals
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
plt.hist(residuals, bins=20, edgecolor='k')
plt.xlabel('Residual')
plt.ylabel('Frequency')
plt.title('Histogram of Residuals (Decision Tree Regressor)')
plt.show()

# Visualize the tree structure
from sklearn.tree import plot_tree

plt.figure(figsize=(20, 10))
plot_tree(regressor, filled=True, feature_names=dataset.columns[:-1], rounded=True)
plt.title('Decision Tree Structure')
plt.show()